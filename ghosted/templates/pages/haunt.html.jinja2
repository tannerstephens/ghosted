{% extends "base.html.jinja2" %}


{% block content %}
  <div class="is-hidden" id="ghosts">{{ ghosts }}</div>
  <div class="is-hidden" id="uid">{{ ghost_id }}</div>
  <section class="section">
    <div class="columns is-multiline">
      <div class="column is-full-tablet is-one-quarter-desktop">
        <h1 class="title has-text-light">{{ ghost_id }}</h1>
        &nbsp;
        <h1 class='title has-text-light is-4'>Steps to Ghosting</h1>
        <div class='content has-text-light'>
          <ol type='1'>
            <li>Click the "Download Ghosts" button below</li>
            <li>Print and cut out the ghosts</li>
            <li>Make a goodie bag and make sure to include the ghost and poem!</li>
            <li>Deliver your goodie bag to a friend!</li>
            <li>Watch your ghost network grow!</li>
          </ol>
        </div>
        <button class='button is-orange is-fullwidth' onClick='download_ghosts()'>Download Ghosts</button>
      </div>
      <div class="column is-full-tablet is-three-quarters-desktop fill" id="ghostView">
      </div>
    </div>
  </section>
  <iframe id="filedownload" class='is-hidden'></iframe>
{% endblock content %}


{% block scripts %}
  <script>
    function download_ghosts() {
      document.getElementById('filedownload').src = '/haunt/download?r=' + Math.random();
    }


    function update_ghosts(ghosts) {
      const ghost_id = document.getElementById("uid").innerHTML;

      const nodes = new vis.DataSet(ghosts.reduce(function(acc, cur) {
        if (cur.is_active) {
          acc.push({
            id: cur.id,
            image: ghost_id == String(cur.id) ? "{{ url_for('static', filename='ghost-o.png') }}" : "{{ url_for('static', filename='ghost.png') }}",
            size: (cur.children.length*3 + 20),
            shape: 'image',
            color: {
              border: '#999'
            }
          });
        }

        return acc;
      }, []));


      const edges = new vis.DataSet(ghosts.reduce(function(acc, cur) {
        return acc.concat(cur.children.map(function(child) {
          return {
            from: cur.id,
            to: child.id,
            arrows: 'to'
          };
        }));
      }, []));

      const netdata = {
        nodes: nodes,
        edges: edges
      };

      const options = {};

      const container = document.getElementById("ghostView");

      const network = new vis.Network(container, netdata, options);
    }


    document.addEventListener('DOMContentLoaded', function() {
      const ghosts = JSON.parse(document.getElementById('ghosts').innerHTML);

      update_ghosts(ghosts);
    })
  </script>
{% endblock scripts %}
